#!/bin/bash

set -Eeuo pipefail

RELEASER_VERSION="2.1.0"
DOCKER_OPS_VERSION="2.0.0"
SECRET_OPS_VERSION="0.6.1"

SECRET_OPS_FILE="ops/secret-ops"
SECRET_OPS_TAR_FILE="ops/secret-ops-${SECRET_OPS_VERSION}.tar.gz"
RELEASER_FILE="ops/releaser-${RELEASER_VERSION}"
DOCKER_OPS_FILE="ops/docker-ops-${DOCKER_OPS_VERSION}"

mkdir -p ops
if [[ ! -f $RELEASER_FILE ]];then
  wget --quiet -O $RELEASER_FILE https://github.com/kudulab/releaser/releases/download/${RELEASER_VERSION}/releaser
fi
source $RELEASER_FILE
if [[ ! -f $DOCKER_OPS_FILE ]];then
  wget --quiet -O $DOCKER_OPS_FILE https://github.com/kudulab/docker-ops/releases/download/${DOCKER_OPS_VERSION}/docker-ops
fi
source $DOCKER_OPS_FILE
if [[ ! -f $SECRET_OPS_TAR_FILE ]];then
  wget --quiet -O $SECRET_OPS_TAR_FILE https://github.com/kudulab/secret-ops/releases/download/${SECRET_OPS_VERSION}/secret-ops.tar.gz
  tar -xf $SECRET_OPS_TAR_FILE -C ops
fi
source $SECRET_OPS_FILE

image_name="kudulab/gocd-cli-dojo"
image_registry="dockerhub"
image_dir="./image"

GOCD_GROOVY_VERSION="0.7.5-66"

function docker_login {
  vault_user_path=$USER
  if [ $vault_user_path == "go" ]; then
    vault_user_path="gocd"
  fi
  dockerhub_user=$(vault read -field=user secret/$vault_user_path/dockerhub)
  vault read -field=password secret/$vault_user_path/dockerhub | docker login --username $dockerhub_user --password-stdin
}

function download_groovy_plugin {
  mkdir -p image/libs/
  wget -O image/libs/gocd-groovy-dsl-config-plugin-${GOCD_GROOVY_VERSION}.jar https://github.com/gocd-contrib/gocd-groovy-dsl-config-plugin/releases/download/v${GOCD_GROOVY_VERSION}/gocd-groovy-dsl-config-plugin-${GOCD_GROOVY_VERSION}.jar
}

function get_plugin_version {
  PLUGIN_VERSION=$(ls image/libs/$1-config-plugin-*.jar | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+')
  echo $PLUGIN_VERSION
}

command="$1"
set +u
case "${command}" in
  set_version)
      set +u
      releaser::bump_changelog_version "$2" "$3"
      ;;
  verify_version)
      releaser::verify_release_ready
      ;;
  build_local)
      if [ -z "$2" ]; then
        echo "Must specify plugin to build as argument: yaml, json, groovy"
        exit 1
      elif [ $2 == "groovy" ]; then
        download_groovy_plugin
        PLUGIN_VERSION=${GOCD_GROOVY_VERSION}
      else
        PLUGIN_VERSION=$(get_plugin_version $2)
      fi
      imagerc_filename="imagerc.$2"
      image_tag=$2-$PLUGIN_VERSION-$(git rev-parse HEAD)
      # build image and push to a test registry
      docker_ops::docker_build "${image_dir}" "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"
      ;;
  build)
      docker_login
      ./tasks build_local $2
      docker_ops::push "${image_dir}" "${imagerc_filename}"
      ;;
  itest)
      if [ -z "$2" ]; then
        echo "Must specify plugin to build as argument: yaml, json, groovy"
        exit 1
      fi
      plugin=$2
      imagerc_filename="imagerc.$plugin"
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      echo "DOJO_DOCKER_IMAGE=\"${KUDU_DOCKER_IMAGE_URL}\"" > ./Dojofile-$plugin
      echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile-$plugin
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/test_dojo_work" >> ./Dojofile-$plugin
      time bats "$(pwd)/test/integration/$plugin/bats"
      ;;
  example)
      if [ -z "$2" ]; then
        echo "Must specify plugin to build as argument: yaml, json, groovy"
        exit 1
      fi
      plugin=$2
      imagerc_filename="imagerc.$plugin"
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"
      echo "Testing image: ${KUDU_DOCKER_IMAGE_URL}"
      echo "DOJO_DOCKER_IMAGE=\"${KUDU_DOCKER_IMAGE_URL}\"" > ./Dojofile-$plugin
      echo "DOJO_IDENTITY_OUTER=\"$(pwd)/test/integration/identities/full\"" >> ./Dojofile-$plugin
      echo "DOJO_WORK_OUTER=$(pwd)/test/integration/test_dojo_work" >> ./Dojofile-$plugin
      dojo -c ./Dojofile-$plugin
      ;;
  release)
      releaser::conditional_release
      ;;
  publish)
      docker_login
      if [ -z "$2" ]; then
        echo "Must specify plugin as argument: yaml, json, groovy"
        exit 1
      elif [ $2 == "groovy" ]; then
        PLUGIN_VERSION=${GOCD_GROOVY_VERSION}
      else
        PLUGIN_VERSION=$(get_plugin_version $2)
      fi
      plugin=$2
      version=$(releaser::get_last_version_from_whole_changelog "${changelog_file}")
      imagerc_filename="imagerc.$plugin"
      docker_ops::ensure_pulled_image "${image_dir}" "${imagerc_filename}"

      image_tag=$2-$PLUGIN_VERSION-$version
      docker_ops::retag_push "${image_dir}"  "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"

      image_tag=$2-$PLUGIN_VERSION
      docker_ops::retag_push "${image_dir}"  "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"

      image_tag=$2
      docker_ops::retag_push "${image_dir}"  "${imagerc_filename}" "${image_name}" "${image_tag}" "${image_registry}"
      ;;
  generate_vault_token)
      vault_token=$(vault token create -orphan -ttl=48h -policy=gocd -field token -metadata gocd_renew=true)
      secured_token_gocd=$(secret_ops::encrypt_with_gocd_top "${vault_token}")
      echo "Generated token: ${vault_token} and encrypted by GoCD server"
      secret_ops::insert_vault_token_gocd_yaml "${secured_token_gocd}"
      ;;
  *)
      echo "Invalid command: '${command}'"
      exit 1
      ;;
esac
